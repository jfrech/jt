#! /bin/zsh

# Jonathan Frech, April to June 2020

jt_repository="https://raw.githubusercontent.com/jfrech/jt/master"
jt_local="$(dirname "$0")"


fail () {
    printf "\33[1m\33[94mjt error:\33[0m %s\n" "$*" >&2 && exit 1 }
fail_in () {
    printf "\33[1m\33[94mjt error (in '%s')\33[0m %s" "$1"
    fail ${@:2} ; exit 1 }


require () {
    for cmd in "$@"; do
        [ -z "$(command -v $cmd)" ] \
            && fail_in 'require ()' "Please install '$cmd'."
    done
    return 0 }

assure_tools_list () {
    [ -f "$jt_local/toolbox/tools.txt" ] && return 0
    curl --silent --fail "$jt_repository/toolbox/tools.txt" \
        > "$jt_local/.download/tools.txt"
    rm -rf "$jt_local/toolbox/tools.txt"
    mv "$jt_local/.download/tools.txt" "$jt_local/toolbox/tools.txt" }

for_all_tools () {
    assure_tools_list
    < "$jt_local/toolbox/tools.txt" | while read ln; do "$1" "$ln"; done }
enable_all_version () {
    [ ! "$#" = '2' ] && fail_in "$1 ()" 'Invalid arg count.'
    [ "$2" = 'all' ] && for_all_tools "$1" && return 0
    "$1" ${@:2} }

list () {
    tool="$1"
    assure_tools_list
    ! grep -q "^$tool\$" "$jt_local/toolbox/tools.txt" \
        && fail_in 'list ()' "Tool '$tool' does not exist."

    # [dxMb]: downloaded, extracted, has Makefile, built
    printf '['
    [ -f "$jt_local/toolbox/$tool.tar.gz"   ] && printf 'd' || printf -- '-'
    [ -d "$jt_local/toolbox/$tool"          ] && printf 'x' || printf -- '-'
    [ -f "$jt_local/toolbox/$tool/Makefile" ] && printf 'M' || printf -- '-'
    [ -f "$jt_local/toolbox/$tool/$tool"    ] && printf 'b' || printf -- '-'
    printf '] %s\n' "$tool" }

download () {
    tool="$1"
    [ -f "$jt_local/toolbox/$tool.tar.gz" ] && return 0

    mkdir -p "$jt_local/.download"
    curl --fail --silent "$jt_repository/toolbox/$tool.tar.gz" \
        > "$jt_local/.download/$tool.tar.gz" \
        || fail_in 'download ()' "Failed to download '$tool'."

    mkdir -p "$jt_local/toolbox"
    mv "$jt_local/.download/$tool.tar.gz" "$jt_local/toolbox/$tool.tar.gz" }

extract () {
    tool="$1"
    [ -d "$jt_local/toolbox/$tool" ] && return 0
    [ ! -f "$jt_local/toolbox/$tool.tar.gz" ] && download "$tool"

    tar -xf "$jt_local/toolbox/$tool.tar.gz" -C "$jt_local/toolbox" }

build () {
    tool="$1"
    [ -f "$jt_local/toolbox/$tool/$tool" ] && return 0
    [ ! -d "$jt_local/toolbox/$tool" ] && extract "$tool"

    [ -f "$jt_local/toolbox/$tool/Makefile" ] \
        && make --silent -C "$jt_local/toolbox/$tool" > /dev/null

    [ ! -f "$jt_local/toolbox/$tool/$tool" ] \
        && fail_in 'build ()' "Could not unpack '$tool'."
    chmod +x "$jt_local/toolbox/$tool/$tool" }

run () {
    tool="$1"
    [ -z "$1" ] && fail_in 'run ()' 'Invalid arg count.'
    tool="$1"
    [ "$tool" = 'all' ] && fail_in 'run ()' 'Refusing to run all tools.'

    [ ! -f "$jt_local/toolbox/$tool/$tool" ] && build "$tool"

    [ ! -f "$jt_local/toolbox/$tool/$tool" ] \
        && fail_in 'run ()' "Could not find tool '$tool'."
    "$jt_local/toolbox/$tool/$tool" ${@:2} }

remove () {
    tool="$1"
    rm -rf "$jt_local/toolbox/$tool.tar.gz" "$jt_local/toolbox/$tool" }

update_self () {
    mkdir -p "$jt_local/.download"
    curl --fail --silent "$jt_repository/jt" \
        | sed "s|^jt_repository=\"[^\"]*\"\$|jt_repository=\"$jt_repository\"|" \
        > "$jt_local/.download/jt" \
        || fail_in 'update_self ()' "Failed to download 'jt'."

    mkdir -p "$jt_local"
    mv "$jt_local/.download/jt" "$jt_local/jt"
    chmod +x "$jt_local/jt" }
update () {
    tool="$1"
    [ "$tool" = 'self' ] && update_self && return 0

    rebuild=''
    [ -e "$jt_local/toolbox/$tool.tar.gz" ] && remove "$tool" && rebuild='j'
    [ -e "$jt_local/toolbox/$tool"        ] && remove "$tool" && rebuild='j'

    [ -n "$rebuild" ] && build "$tool" && return 0

    fail_in 'update ()' "Cannot update uninstalled tool '$tool'." }

get () {
    fail_in 'get ()' 'Not yet implemented.' }

help () {
    fail_in 'help ()' 'Not yet implemented.' }

internal () {
    rm -rf "$jt_local/toolbox/tools.txt"

    case "$1" in
        list)     enable_all_version list ${@:2} ;;

        download) enable_all_version download ${@:2} ;;
        extract)  enable_all_version extract ${@:2} ;;
        build)    enable_all_version build ${@:2} ;;
        remove)   enable_all_version remove ${@:2} ;;

        require)  require ${@:2} ;;

        # This command is questionable.
        update)   enable_all_version update ${@:2} ;;

        get)      get ${@:2} ;;
        help)     help ${@:2} ;;

        fail)     fail_in "$1" ${@:2} ;;
        *)        fail_in 'internal ()' "Unknown command '$1'." ;;
    esac }


require realpath dirname mv rm mkdir rmdir printf grep sed curl tar make gcc \
    chmod xargs

case "$1" in
    internal) internal ${@:2} ;;
    *)        run $@ ;;
esac
