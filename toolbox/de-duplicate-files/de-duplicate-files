#! /bin/zsh

# Recursively goes thru a given directory, searches for identical files and
# prompts the user if only one of them shall be kept.

jt="$(realpath "$(dirname "$0")/../../jt")"
fail () { "$jt" internal fail $@ ; exit 1 }

hashsum='md5sum'

[ ! "$#" = '1' ] && fail 'No argument given.'
root="$(realpath "$1")"


function handle_identicals () {
    [ "$#" -le '1' ] && fail 'handle_identicals (): Internal error.'

    printf '\nThe following \33[94m%d files\33[0m are identical.\n' "$#"
    j=0; for f in $@; do printf '%d) \33[94m"%q"\33[0m\n' "((++j))" "$f"; done

    printf 'Which file do you want to keep (1-%d)? ' "$#"
    printf '\33[3mAll other files will be removed. '
    printf "Type '0' to do nothing.\33[0m > "
    read keep; keep="$(printf '%d' "$keep")"
    [ "$keep" -lt '1' ] && keep=0
    [ "$keep" -gt "$#" ] && keep=0
    [ "$keep" -eq '0' ] && printf 'Aborting ...\n' && return 1

    for f in $@; do
        ! cmp >/dev/null "${@[1]}" "$f" \
            && fail 'handle_identicals (): Contrary to the above,' \
                    'the files are not identical.\33[0m\n'
    done

    for f in $@; do [ ! "$f" = "${@[$keep]}" ] && "$jt" safe rm "$f"; done }


hash_files=()
handle () {
    hf="$("$hashsum" "$1")"
    h="${hf%% *}" f="${hf#*  }"
    hash_files+=("$h $f")
    printf '# %s "%q"\n' "$h" "$f" }
find "$root" -type f | while read f; do handle "$f"; done


for hf in $hash_files; do
    h="${hf%% *}"
    printf '%s\n' "$h"
done | sort | uniq -d | while read uniq_h; do
    files_of_same_hash=()
    for hf in $hash_files; do
        h="${hf%% *}" f="${hf#* }"
        [ "$uniq_h" = "$h" ] || continue
        files_of_same_hash+=("$f")
    done

    [ "$#files_of_same_hash" -le '1' ] && fail 'Internal catastrophy.'
    first_file="${files_of_same_hash[1]}"
    for fosh in $files_of_same_hash; do
        cmp >/dev/null "$first_file" "$fosh" || fail 'Hash collision.'
    done

    <&2 handle_identicals $files_of_same_hash
done

exit 0
