" Jonathan Frech's .vimrc; last modified 13rd of June 2020

let mapleader = " "

" force UTF-8
set encoding=utf-8
setglobal fileencoding=utf-8
set fileencodings=utf-8

""" {{{ EXPERIMENTAL {{{
set ignorecase smartcase
set incsearch

" Make `Y` not work as `yy` but instead as 'yank to end of line'.
map Y y$

" open a link in the form of "...](https://...)" in a browser
" TODO Possibly use a scratch buffer opposed to the current document?
nnoremap <leader>l 0f]lyi(o%#<C-r>"<esc>:s/\([%#]\)/\\\1/g<cr>0xxxxdd:!"$BROWSER" "<C-r>"<bs>"

" insert the current date
inoremap <C-d> <cr>$<esc>k:r! LC_ALL=en_NZ.utf8 date '+\%dth of \%B \%Y' \| sed 's/^0//; s/1th/1st/; s/2th/2nd/; s/3th/3rd/'<cr>kgJgJa<bs>

set matchpairs+=<:>
set scrolloff=3
"set showmatoch
set showmode
"set magic
set bs=indent,eol,start

nnoremap <leader>u /[^ -~]<cr>

" transform a postincrement to a preincrement
nnoremap <leader>+ /++<cr>xxbi++<esc>

""" }}} EXPERIMENTAL }}}


" the directory "$HOME/.vim" should have been created
set hidden undofile undodir=$HOME/.vim/undo
set path+=**

" enable syntax highlighting and load the j colorscheme
set number relativenumber numberwidth=4
set colorcolumn=80
set cursorline
set noruler
syntax on
colo j2
set nohlsearch

" relay vim's title
set title

" may need to be removed on slow terminals
autocmd BufEnter * :syntax sync fromstart

" use four spaces instead of a tab
set expandtab softtabstop=4 shiftwidth=4

" specify line breaking behaviour
set linebreak breakindent showbreak=~:\ 

" messages and menus
set shortmess=asTIc
set wildmenu wildmode=longest,full

" by default, splits now shall open above and to the left
set splitbelow splitright


" change quotation style TODO the cursor position is non-static
nnoremap <leader>' F"r'f"r'
nnoremap <leader>" F'r"f'r"

" leader abbreviations
nnoremap <silent> <leader>t :term<cr>
nnoremap <silent> <leader>r :set ruler!<cr>
nnoremap <silent> <leader>n :set hlsearch!<cr>


" silent mode -- center the current window (a bit of a hack)
let s:silence = 0
function ToggleSilence ()
    if s:silence
        call win_gotoid(s:silence_left)
        noautocmd wincmd q
        call win_gotoid(s:silence_right)
        noautocmd wincmd q

        call win_gotoid(s:silence_back)

        hi VertSplit cterm=NONE ctermfg=%text ctermbg=%faint
        set fillchars=vert:\|,fold:-
        set number relativenumber colorcolumn=80
    else
        exec 'only'
        let s:silence_back = win_getid()

        call win_gotoid(s:silence_back)
        set nosplitright
        vert sview %newlines_file
        set nonumber
        set colorcolumn=0 nocursorline nocursorcolumn nolist
        let s:silence_left = win_getid()

        call win_gotoid(s:silence_back)
        set splitright
        vert sview %newlines_file
        set nonumber
        set colorcolumn=0 nocursorline nocursorcolumn nolist
        let s:silence_right = win_getid()

        call win_gotoid(s:silence_back)
        set nonumber norelativenumber colorcolumn=0
        vertical resize 80

        hi VertSplit cterm=NONE ctermfg=NONE ctermbg=NONE
        set fillchars=vert: ,fold: 

        set laststatus=0
    end
    let s:silence = !s:silence
endfunction
nnoremap <silent> <leader>j :silent call ToggleSilence ()<cr>
function UntoggleSilence ()
    if s:silence
        call ToggleSilence ()
    end
endfunction
au QuitPre * :silent call UntoggleSilence ()

" allow for a togglable cursor crosshair
set cursorline nocursorcolumn
hi CursorLine   cterm=NONE ctermfg=NONE ctermbg=NONE
hi CursorColumn cterm=NONE ctermfg=NONE ctermbg=NONE
let s:crosshair = 0
function ToggleCursorCrosshair ()
    if s:crosshair
        set cursorline nocursorcolumn
        hi CursorLine   cterm=NONE ctermfg=NONE ctermbg=NONE
        hi CursorColumn cterm=NONE ctermfg=NONE ctermbg=NONE
    else
        set cursorline cursorcolumn
        hi CursorLine   cterm=bold ctermfg=NONE ctermbg=%faintCH
        hi CursorColumn cterm=bold ctermfg=NONE ctermbg=%faintCH
    end
    let s:crosshair = !s:crosshair
endfunction
nnoremap <silent> <leader>h :call ToggleCursorCrosshair ()<cr>

" display special chars
set list listchars=tab:>>,trail:~,nbsp:!
let s:showInvisible = 0
function ToggleShowInvisible ()
    if s:showInvisible
        set listchars=tab:>>,trail:~,nbsp:!
        hi NonText     ctermfg=%faint
        hi SpecialKey  ctermfg=%faint
        hi EndOfBuffer ctermfg=%faint
    else
        set listchars=tab:>>,trail:~,nbsp:!,space:_,eol:`
        hi NonText     cterm=bold ctermfg=206
        hi SpecialKey  cterm=bold ctermfg=206
        hi EndOfBuffer cterm=bold ctermfg=206
    end
    let s:showInvisible = !s:showInvisible
endfunction
nnoremap <silent> <leader>i :call ToggleShowInvisible ()<cr>

" run xxd on current buffer
let s:hexEditing = 0
function ToggleHexEditing ()
    if s:hexEditing
        execute "%!xxd -r"
    else
        execute "%!xxd"
    end
    let s:hexEditing = !s:hexEditing
endfunction
nnoremap <leader>x :call ToggleHexEditing ()<cr>


" ban arrow keys
nnoremap <Left>  <Nop>
nnoremap <Right> <Nop>
nnoremap <Up>    <Nop>
nnoremap <Down>  <Nop>
inoremap <Left>  <Nop>
inoremap <Right> <Nop>
inoremap <Up>    <Nop>
inoremap <Down>  <Nop>
vnoremap <Left>  <Nop>
vnoremap <Right> <Nop>
vnoremap <Up>    <Nop>
vnoremap <Down>  <Nop>
cnoremap <Left>  <Nop>
cnoremap <Right> <Nop>
cnoremap <Up>    <Nop>
cnoremap <Down>  <Nop>


""" {{{ LEGACY {{{
"highlight ColorColumn ctermbg=30
"highlight NonText cterm=bold ctermfg=71 ctermbg=NONE
"nnoremap <leader>' f"vi""jda<bs><bs>''<esc>"jPT'
"nnoremap <leader>" f'vi'"jda<bs><bs>""<esc>"jPT"
"set shiftround
""" }}} LEGACY }}}
