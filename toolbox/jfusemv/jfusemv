#! /bin/zsh

jt="$(realpath "$(dirname "$0")/../../jt")"
fail () { "$jt" internal fail $@ ; exit 1 }

[ ! "$#" = '2' ] && fail "Need exactly two arguments."
src="$(realpath "$PWD/$1")" dst="$(realpath "$PWD/$2")"
[ ! -d "$src" ] && fail "Source needs to be a directory, not '$src'."
[ ! -d "$dst" ] && fail "Destination needs to be a directory, not '$dst'."

build_script () {
    src_f="$1" dst_f="$dst/$(realpath --relative-to="$src" "$1")"
    [ ! -e "$dst_f" ] \
        && printf 'mkdir -p "%q"\n' "$(dirname "$dst_f")" \
        && printf 'mv "%q" "%q"\n' "$src_f" "$dst_f" && return
    printf 'WIP\n' }

new_files=() duplicate_files=() collision_files=() error_files=()

handle () {
    src_f="$1" dst_f="$dst/$(realpath --relative-to="$src" "$1")"
    [ ! -e "$dst_f" ] && new_files+=("$src_f") && return
    [ -f "$dst_f" ] && cmp "$src_f" "$dst_f" >/dev/null \
        && duplicate_files+=("$src_f") && return
    [ -f "$dst_f" ] && collision_files+=("$src_f") && return

    error_files+=("$src_f") && return }


find "$src" -type f | sort | while read f; do handle "$f"; done

printf 'Analyzing the fusion "%q" ->> "%q".\n' "$src" "$dst"
for n in $duplicate_files; do printf '\33[34md "%q"\33[0m\n' "$n"; done
for n in $new_files      ; do printf '\33[92mn "%q"\33[0m\n' "$n"; done
for C in $collision_files; do printf '\33[93mC "%q"\33[0m\n' "$C"; done
for E in $error_files    ; do printf '\33[91mE "%q"\33[0m\n' "$E"; done

summary () {
    [ ! "$2" = '0' ] && printf "$1"
    printf '%d %s file' "$2" "$3"
    [ ! "$2" = '1' ] && printf 's'
    [ ! "$2" = '0' ] && printf '\33[0m' }
printf 'Summary of the fusion analysis "%q" ->> "%q":\n' "$src" "$dst"
summary '\33[34m' "$#duplicate_files" 'duplicate' && printf ', '
summary '\33[92m' "$#new_files" 'new' && printf ', '
summary '\33[93m' "$#collision_files" 'collision' && printf ', '
summary '\33[91m' "$#error_files" 'error' && printf ', '
printf '\n'
